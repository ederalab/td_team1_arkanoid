import pygame, time
from .inputsystem import InputSystem
from .scenefactory import SceneFactory
import pygame.locals
from .collisionsystem import CollisionSystem
from .scene import Scene
from .bouncingmovementcomponent import *

class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]
    
class Engine(metaclass = Singleton):
    
    def __init__(self):
        pygame.init()
        self.inputSystem = InputSystem()
        self.collisionSystem = CollisionSystem()
        self.scene = None
        self.window = None
        self.quit = False
        global counter
        self.newTime = time.time()
        self.oldTime = self.newTime
    
    def loadScene(self, filename):    
        # Level setup code
        self.scene = SceneFactory.loadSceneFromFile(filename)

        # setup the window
        self.window = pygame.display.set_mode((self.scene.windowRect.width, self.scene.windowRect.height), 0, 32)
        pygame.display.set_caption(self.scene.title)

        self.scene.load()
        
    def gameloop(self):
        while not self.quit:
            self.processEvents()
            self.update()
            self.render()
        
        pygame.quit()
        
    def processEvents(self):
        # process all the events generated by the system
        for event in pygame.event.get():
            # event QUIT is generated when the user closes the application window
            if event.type == pygame.locals.QUIT:
                self.quit = True
                
        self.inputSystem.process()
        self.collisionSystem.process()
        
    
    def update(self):
        self.newTime = time.time()
        deltaTime = self.newTime - self.oldTime
        self.scene.update(deltaTime)
        
        self.oldTime = self.newTime
        
    def render(self):
        # clear the screen
        BLACK = (0, 0, 0)
        WHITE = (255, 255, 255)
        self.window.fill(BLACK)

        self.scene.render(self.window)    
        
        
        # Print life
        font = pygame.font.SysFont(None, 36)
        text = font.render(f"Life: {len(counter)}", True, WHITE)
        textRect = text.get_rect()
        textRect.centerx = 590
        textRect.centery = 622
        self.window.blit(text, textRect)
        
        # update the display with the new content of the window
        pygame.display.update()
